using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PivotController : MonoBehaviour
{

    [SerializeField] private GameObject pivot;
    [SerializeField] private GameObject product;
    [SerializeField] private float rotationSpeed = 10f;
    private Camera cam;
    private bool pivotSet = false;
    private Vector3 previousMousePos, lastClick, dragDirection;
    private float mouseDownTime, mouseUpTime;
    // Start is called before the first frame update
    void Start()
    {
        cam = Camera.main;
    }

    // Update is called once per frame
    void Update()
    {
        Ray ray = cam.ScreenPointToRay(Input.mousePosition);

        if (Physics.Raycast(ray, out RaycastHit hit))
        {
            if(hit.collider.CompareTag("Product"))
            {
                if (Input.GetMouseButtonDown(0))
                {  
                    mouseDownTime = Time.time;                    
                }
                if (Input.GetMouseButtonUp(0))
                {
                    mouseUpTime = Time.time;
                    // check if the click is a drag or a click
                    if (mouseUpTime - mouseDownTime < 0.2f)
                    {
                        pivotSet = true;
                        product.transform.SetParent(null);
                        pivot.transform.position = hit.point;
                        product.transform.SetParent(pivot.transform);
                    }
                }


            }
        }

        if (IsMouseDragging())
        {
            if (!pivotSet)
                return;
            // axis generated by drag
            Vector3 dragAxis = new Vector3(dragDirection.y, -dragDirection.x, 0f).normalized;
            // convert drag axis to world space
            Vector3 worldAxis = cam.transform.TransformDirection(dragAxis);
            // angle proportional to drag length
            float angle = dragDirection.magnitude * rotationSpeed;     
            product.transform.RotateAround(pivot.transform.position, worldAxis, angle);
        }
    }

    bool IsMouseDragging()
    {
        if (!Input.GetMouseButton(0))
        {
            previousMousePos = Input.mousePosition;
            return false;
        }

        if (Input.GetMouseButtonDown(0))
        {
            previousMousePos = Input.mousePosition;
            return false;
        }

        Vector3 currentMousePos = Input.mousePosition;
        dragDirection = currentMousePos - previousMousePos;
        previousMousePos = currentMousePos;

        //ignore if drag is too small
        if (dragDirection.sqrMagnitude < Mathf.Epsilon)
            return false;

        return true;
    }
}
